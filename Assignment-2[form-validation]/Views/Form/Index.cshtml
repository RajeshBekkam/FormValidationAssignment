@model FormModel
@{
    var CountryCodes = ViewData["CountryCodes"] as List<string>;
    var Services = ViewData["Services"] as List<string>;
}

<div class="container">
    <div class="form-container shadow">
        <h6 class="text-start pb-3">Edit Address</h6>

        <form id="addressForm" method="post" novalidate>
            <!-- Name Field -->
            <div class="row mb-3">
                <div class="col">
                    <label asp-for="Name" class="form-label">Name*</label>
                    <input asp-for="Name" type="text" class="form-control" id="name" placeholder="John Doe">
                    <span id="nameError" class="text-danger"></span>
                </div>
                <div class="col">
                    <label asp-for="Email" class="form-label">Email*</label>
                    <input asp-for="Email" class="form-control" id="email" placeholder="JohnDoe@gmail.com">
                    <span id="emailError" class="text-danger"></span>
                </div>
            </div>

            <!-- Billing Address Field -->
            <div class="mb-3">
                <label asp-for="BillingAddress" class="form-label">Billing Address*</label>
                <textarea asp-for="BillingAddress" class="form-control" id="billingAddress" rows="3" placeholder="Address"></textarea>
                <span id="billingAddressError" class="text-danger"></span>
            </div>

            <!-- Contact Field -->
            <div class="row mb-3">
                <div class="col">
                    <label asp-for="Contact" class="form-label">Contact*</label>
                    <div class="input-group">
                        <select asp-for="CountryCode" class="form-select flex-grow-0 w-auto" id="CountryCode">
                            <option selected>EN</option>
                            @if (CountryCodes != null)
                            {
                                @foreach (var code in CountryCodes)
                                {
                                    <option>@code</option>
                                }
                            }
                        </select>
                        <input asp-for="Contact" type="text" class="form-control" id="contact" placeholder="+44 0000 000000">
                        <span id="contactError" class="text-danger"></span>
                    </div>
                </div>

                <!-- Service Field -->
                <div class="col">
                    <label asp-for="Service" class="form-label">Services</label>
                    <select asp-for="Service" class="form-select" id="services">
                        <option selected>Select</option>
                        @if (Services != null)
                        {
                            @foreach (var service in Services)
                            {
                                <option>@service</option>
                            }
                        }
                    </select>
                </div>
            </div>

            <!-- Zip Code and VAT Number -->
            <div class="row mb-3">
                <div class="col">
                    <label asp-for="ZipCode" class="form-label">Zip Code*</label>
                    <input asp-for="ZipCode" type="text" class="form-control" id="zipCode" placeholder="000000">
                    <span id="zipCodeError" class="text-danger"></span>
                </div>
                <div class="col">
                    <label asp-for="VATNumber" class="form-label">VAT Number*</label>
                    <input asp-for="VATNumber" type="text" class="form-control" id="vatNumber" placeholder="000000">
                    <span id="vatNumberError" class="text-danger"></span>
                </div>
            </div>

            <!-- Buttons -->
            <div class="row mb-3">
                <div class="col-6">
                    <button type="button" class="btn btn-outline-secondary w-100">Cancel</button>
                </div>
                <div class="col-6">
                    <button type="submit" class="btn btn-custom w-100">Submit</button>
                </div>
            </div>

        </form>
    </div>
</div>

<script>
    // function to validate a field is not empty
    function validateRequiredField(fieldId, errorId, errorMessage) {
        const field = document.getElementById(fieldId);
        if (field.value.trim() === '') {
            displayError(errorId, errorMessage);
            return false;
        }
        return true;
    }

    // function to validate a field with regex
    function validateFieldWithRegex(fieldId, errorId, regex, errorMessage) {
        const field = document.getElementById(fieldId).value.trim();
        if (!regex.test(field)) {
            displayError(errorId, errorMessage);
            return false;
        }
        return true;
    }

    // function to display validation errors
    function displayError(errorId, errorMessage) {
        document.getElementById(errorId).innerText = errorMessage;
    }

    // function to clear all errors
    function clearErrors(errorIds) {
        errorIds.forEach(errorId => {
            document.getElementById(errorId).innerText = '';
        });
    }

    // Main form validation function
    document.getElementById('addressForm').addEventListener('submit', function (event) {

        // Prevent form submission
        event.preventDefault(); 

        // Clear previous errors
        clearErrors(['nameError', 'emailError', 'billingAddressError', 'contactError', 'zipCodeError', 'vatNumberError']);

        let isValid = true;


        // Validate fields
        isValid &= validateRequiredField('name', 'nameError', 'Name is required.');
        isValid &= validateFieldWithRegex('email', 'emailError', /^\+?\d{10,15}$/, 'Please enter a valid email address.');
        isValid &= validateRequiredField('billingAddress', 'billingAddressError', 'Billing Address is required.');
        isValid &= validateFieldWithRegex('contact', 'contactError', /^\+?\d{10,15}$/, 'Please enter a valid contact number.');
        isValid &= validateFieldWithRegex('zipCode', 'zipCodeError', /^\d{6}$/, 'Please enter a valid Zip Code (6 digits).');
        isValid &= validateFieldWithRegex('vatNumber', 'vatNumberError', /^\d{6}$/, 'Please enter a valid VAT Number (6 digits).');

        // If valid, submit the form
        if (isValid) {
            this.submit();
        }
    });
</script>
